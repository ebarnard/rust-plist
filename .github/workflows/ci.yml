on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

name: Build and Test

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            channel: 1.59.0
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            channel: stable
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            channel: beta
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            channel: nightly
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          default: true
          toolchain: ${{ matrix.channel }}-${{ matrix.target }}

      - name: Build and Test (Debug, No Default Features)
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-default-features --target ${{ matrix.target }}

      - name: Build and Test (Debug, enable_unstable_features_that_may_break_with_minor_version_bumps)
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-default-features --features enable_unstable_features_that_may_break_with_minor_version_bumps --target ${{ matrix.target }}

      - name: Build and Test (Debug, serde)
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-default-features --features serde --target ${{ matrix.target }}

      - name: Build and Test (Release, All Features)
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --all-features --target ${{ matrix.target }}

      - name: Build and Test (Minimal Versions, All Features)
        if: ${{ matrix.channel == 'nightly' }}
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features -Z minimal-versions --target ${{ matrix.target }}

  lint:
    name: Lint
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Check for broken intra-doc links
        run: cargo doc --document-private-items

  # This is a hack so we don't have to gate PRs on each element of the build matrix.
  build-and-test-succeeded:
    name: Build and Test Succeeded
    needs: [build-and-test, lint]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

  release:
    name: Release
    needs: build-and-test-succeeded
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Check
        id: check
        run: |
          set -euo pipefail

          TAG_NAME="v$(cargo metadata --format-version=1 | jq -er '.resolve.root as $root | .packages[] | select(.id==$root) | .version')"

          if git ls-remote --exit-code origin "refs/tags/$TAG_NAME"
          then
            echo "publish=false" >> "$GITHUB_OUTPUT"
          else
            echo "publish=true" >> "$GITHUB_OUTPUT"
            echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
          fi

      - name: Cargo Publish
        if: steps.check.outputs.publish == 'true'
        run: |
          cargo publish --token "$CRATES_IO_TOKEN"
        env:
            CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

      - name: Create GitHub Release
        if: steps.check.outputs.publish == 'true'
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.check.outputs.tag_name }}
          release_name: ${{ steps.check.outputs.tag_name }}
          draft: false
          prerelease: false
